// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.util;

import com.uwetrottmann.tmdb2.services.MoviesService;
import com.uwetrottmann.trakt5.services.Movies;
import com.uwetrottmann.trakt5.services.Search;
import com.uwetrottmann.trakt5.services.Sync;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;

public final class MovieTools_MembersInjector implements MembersInjector<MovieTools> {
  private final Provider<MoviesService> tmdbMoviesProvider;

  private final Provider<Movies> traktMoviesProvider;

  private final Provider<Search> traktSearchProvider;

  private final Provider<Sync> traktSyncProvider;

  public MovieTools_MembersInjector(
      Provider<MoviesService> tmdbMoviesProvider,
      Provider<Movies> traktMoviesProvider,
      Provider<Search> traktSearchProvider,
      Provider<Sync> traktSyncProvider) {
    assert tmdbMoviesProvider != null;
    this.tmdbMoviesProvider = tmdbMoviesProvider;
    assert traktMoviesProvider != null;
    this.traktMoviesProvider = traktMoviesProvider;
    assert traktSearchProvider != null;
    this.traktSearchProvider = traktSearchProvider;
    assert traktSyncProvider != null;
    this.traktSyncProvider = traktSyncProvider;
  }

  public static MembersInjector<MovieTools> create(
      Provider<MoviesService> tmdbMoviesProvider,
      Provider<Movies> traktMoviesProvider,
      Provider<Search> traktSearchProvider,
      Provider<Sync> traktSyncProvider) {
    return new MovieTools_MembersInjector(
        tmdbMoviesProvider, traktMoviesProvider, traktSearchProvider, traktSyncProvider);
  }

  @Override
  public void injectMembers(MovieTools instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.tmdbMovies = DoubleCheck.lazy(tmdbMoviesProvider);
    instance.traktMovies = DoubleCheck.lazy(traktMoviesProvider);
    instance.traktSearch = DoubleCheck.lazy(traktSearchProvider);
    instance.traktSync = DoubleCheck.lazy(traktSyncProvider);
  }

  public static void injectTmdbMovies(
      MovieTools instance, Provider<MoviesService> tmdbMoviesProvider) {
    instance.tmdbMovies = DoubleCheck.lazy(tmdbMoviesProvider);
  }

  public static void injectTraktMovies(MovieTools instance, Provider<Movies> traktMoviesProvider) {
    instance.traktMovies = DoubleCheck.lazy(traktMoviesProvider);
  }

  public static void injectTraktSearch(MovieTools instance, Provider<Search> traktSearchProvider) {
    instance.traktSearch = DoubleCheck.lazy(traktSearchProvider);
  }

  public static void injectTraktSync(MovieTools instance, Provider<Sync> traktSyncProvider) {
    instance.traktSync = DoubleCheck.lazy(traktSyncProvider);
  }
}
