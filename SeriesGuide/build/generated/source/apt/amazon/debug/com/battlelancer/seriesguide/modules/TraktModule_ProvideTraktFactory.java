// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.modules;

import android.app.Application;
import com.uwetrottmann.trakt5.TraktV2;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class TraktModule_ProvideTraktFactory implements Factory<TraktV2> {
  private final TraktModule module;

  private final Provider<Application> applicationProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public TraktModule_ProvideTraktFactory(
      TraktModule module,
      Provider<Application> applicationProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    assert module != null;
    this.module = module;
    assert applicationProvider != null;
    this.applicationProvider = applicationProvider;
    assert okHttpClientProvider != null;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public TraktV2 get() {
    return Preconditions.checkNotNull(
        module.provideTrakt(applicationProvider.get(), okHttpClientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<TraktV2> create(
      TraktModule module,
      Provider<Application> applicationProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new TraktModule_ProvideTraktFactory(module, applicationProvider, okHttpClientProvider);
  }

  /** Proxies {@link TraktModule#provideTrakt(Application, OkHttpClient)}. */
  public static TraktV2 proxyProvideTrakt(
      TraktModule instance, Application application, OkHttpClient okHttpClient) {
    return instance.provideTrakt(application, okHttpClient);
  }
}
