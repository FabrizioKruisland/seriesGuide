// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.loaders;

import com.uwetrottmann.tmdb2.Tmdb;
import com.uwetrottmann.tmdb2.services.MoviesService;
import com.uwetrottmann.tmdb2.services.SearchService;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;

public final class TmdbMoviesLoader_MembersInjector implements MembersInjector<TmdbMoviesLoader> {
  private final Provider<Tmdb> tmdbProvider;

  private final Provider<MoviesService> moviesServiceProvider;

  private final Provider<SearchService> searchServiceProvider;

  public TmdbMoviesLoader_MembersInjector(
      Provider<Tmdb> tmdbProvider,
      Provider<MoviesService> moviesServiceProvider,
      Provider<SearchService> searchServiceProvider) {
    assert tmdbProvider != null;
    this.tmdbProvider = tmdbProvider;
    assert moviesServiceProvider != null;
    this.moviesServiceProvider = moviesServiceProvider;
    assert searchServiceProvider != null;
    this.searchServiceProvider = searchServiceProvider;
  }

  public static MembersInjector<TmdbMoviesLoader> create(
      Provider<Tmdb> tmdbProvider,
      Provider<MoviesService> moviesServiceProvider,
      Provider<SearchService> searchServiceProvider) {
    return new TmdbMoviesLoader_MembersInjector(
        tmdbProvider, moviesServiceProvider, searchServiceProvider);
  }

  @Override
  public void injectMembers(TmdbMoviesLoader instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.tmdb = DoubleCheck.lazy(tmdbProvider);
    instance.moviesService = DoubleCheck.lazy(moviesServiceProvider);
    instance.searchService = DoubleCheck.lazy(searchServiceProvider);
  }

  public static void injectTmdb(TmdbMoviesLoader instance, Provider<Tmdb> tmdbProvider) {
    instance.tmdb = DoubleCheck.lazy(tmdbProvider);
  }

  public static void injectMoviesService(
      TmdbMoviesLoader instance, Provider<MoviesService> moviesServiceProvider) {
    instance.moviesService = DoubleCheck.lazy(moviesServiceProvider);
  }

  public static void injectSearchService(
      TmdbMoviesLoader instance, Provider<SearchService> searchServiceProvider) {
    instance.searchService = DoubleCheck.lazy(searchServiceProvider);
  }
}
