// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.modules;

import com.battlelancer.seriesguide.SgApp;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

public final class HttpClientModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final HttpClientModule module;

  private final Provider<SgApp> appProvider;

  private final Provider<Cache> cacheProvider;

  public HttpClientModule_ProvideOkHttpClientFactory(
      HttpClientModule module, Provider<SgApp> appProvider, Provider<Cache> cacheProvider) {
    assert module != null;
    this.module = module;
    assert appProvider != null;
    this.appProvider = appProvider;
    assert cacheProvider != null;
    this.cacheProvider = cacheProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkHttpClient(appProvider.get(), cacheProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      HttpClientModule module, Provider<SgApp> appProvider, Provider<Cache> cacheProvider) {
    return new HttpClientModule_ProvideOkHttpClientFactory(module, appProvider, cacheProvider);
  }

  /** Proxies {@link HttpClientModule#provideOkHttpClient(SgApp, Cache)}. */
  public static OkHttpClient proxyProvideOkHttpClient(
      HttpClientModule instance, SgApp app, Cache cache) {
    return instance.provideOkHttpClient(app, cache);
  }
}
