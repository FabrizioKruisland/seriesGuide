// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.modules;

import com.uwetrottmann.tmdb2.Tmdb;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class TmdbModule_ProvideSgTmdbFactory implements Factory<Tmdb> {
  private final TmdbModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public TmdbModule_ProvideSgTmdbFactory(
      TmdbModule module, Provider<OkHttpClient> okHttpClientProvider) {
    assert module != null;
    this.module = module;
    assert okHttpClientProvider != null;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Tmdb get() {
    return Preconditions.checkNotNull(
        module.provideSgTmdb(okHttpClientProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Tmdb> create(
      TmdbModule module, Provider<OkHttpClient> okHttpClientProvider) {
    return new TmdbModule_ProvideSgTmdbFactory(module, okHttpClientProvider);
  }

  /** Proxies {@link TmdbModule#provideSgTmdb(OkHttpClient)}. */
  public static Tmdb proxyProvideSgTmdb(TmdbModule instance, OkHttpClient okHttpClient) {
    return instance.provideSgTmdb(okHttpClient);
  }
}
