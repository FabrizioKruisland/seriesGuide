// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.modules;

import com.uwetrottmann.tmdb2.Tmdb;
import com.uwetrottmann.tmdb2.services.SearchService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class TmdbModule_ProvideSearchServiceFactory implements Factory<SearchService> {
  private final TmdbModule module;

  private final Provider<Tmdb> tmdbProvider;

  public TmdbModule_ProvideSearchServiceFactory(TmdbModule module, Provider<Tmdb> tmdbProvider) {
    assert module != null;
    this.module = module;
    assert tmdbProvider != null;
    this.tmdbProvider = tmdbProvider;
  }

  @Override
  public SearchService get() {
    return Preconditions.checkNotNull(
        module.provideSearchService(tmdbProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<SearchService> create(TmdbModule module, Provider<Tmdb> tmdbProvider) {
    return new TmdbModule_ProvideSearchServiceFactory(module, tmdbProvider);
  }

  /** Proxies {@link TmdbModule#provideSearchService(Tmdb)}. */
  public static SearchService proxyProvideSearchService(TmdbModule instance, Tmdb tmdb) {
    return instance.provideSearchService(tmdb);
  }
}
