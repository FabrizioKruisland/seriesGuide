// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.battlelancer.seriesguide.modules;

import android.app.Application;
import com.battlelancer.seriesguide.SgApp;
import com.battlelancer.seriesguide.loaders.MovieCreditsLoader;
import com.battlelancer.seriesguide.loaders.MovieCreditsLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.MovieTrailersLoader;
import com.battlelancer.seriesguide.loaders.MovieTrailersLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.PersonLoader;
import com.battlelancer.seriesguide.loaders.PersonLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.ShowCreditsLoader;
import com.battlelancer.seriesguide.loaders.ShowCreditsLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TmdbMoviesLoader;
import com.battlelancer.seriesguide.loaders.TmdbMoviesLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktAddLoader;
import com.battlelancer.seriesguide.loaders.TraktAddLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktCommentsLoader;
import com.battlelancer.seriesguide.loaders.TraktCommentsLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktEpisodeHistoryLoader;
import com.battlelancer.seriesguide.loaders.TraktEpisodeHistoryLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktFriendsEpisodeHistoryLoader;
import com.battlelancer.seriesguide.loaders.TraktFriendsEpisodeHistoryLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktFriendsMovieHistoryLoader;
import com.battlelancer.seriesguide.loaders.TraktFriendsMovieHistoryLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TraktRecentEpisodeHistoryLoader;
import com.battlelancer.seriesguide.loaders.TraktRecentEpisodeHistoryLoader_MembersInjector;
import com.battlelancer.seriesguide.loaders.TvdbAddLoader;
import com.battlelancer.seriesguide.loaders.TvdbAddLoader_MembersInjector;
import com.battlelancer.seriesguide.sync.SgSyncAdapter;
import com.battlelancer.seriesguide.sync.SgSyncAdapter_MembersInjector;
import com.battlelancer.seriesguide.thetvdbapi.SgTheTvdbInterceptor;
import com.battlelancer.seriesguide.thetvdbapi.SgTheTvdbInterceptor_MembersInjector;
import com.battlelancer.seriesguide.thetvdbapi.TvdbEpisodeDetailsTask;
import com.battlelancer.seriesguide.thetvdbapi.TvdbEpisodeDetailsTask_MembersInjector;
import com.battlelancer.seriesguide.thetvdbapi.TvdbTools;
import com.battlelancer.seriesguide.thetvdbapi.TvdbTools_MembersInjector;
import com.battlelancer.seriesguide.traktapi.SgTraktInterceptor;
import com.battlelancer.seriesguide.traktapi.SgTraktInterceptor_MembersInjector;
import com.battlelancer.seriesguide.traktapi.TraktAuthActivity;
import com.battlelancer.seriesguide.traktapi.TraktAuthActivity_MembersInjector;
import com.battlelancer.seriesguide.ui.dialogs.TraktCancelCheckinDialogFragment;
import com.battlelancer.seriesguide.ui.dialogs.TraktCancelCheckinDialogFragment_MembersInjector;
import com.battlelancer.seriesguide.util.AddShowTask;
import com.battlelancer.seriesguide.util.AddShowTask_MembersInjector;
import com.battlelancer.seriesguide.util.AllApisAuthenticator;
import com.battlelancer.seriesguide.util.AllApisAuthenticator_MembersInjector;
import com.battlelancer.seriesguide.util.ConnectTraktTask;
import com.battlelancer.seriesguide.util.ConnectTraktTask_MembersInjector;
import com.battlelancer.seriesguide.util.EpisodeTools;
import com.battlelancer.seriesguide.util.EpisodeTools_EpisodeFlagTask_MembersInjector;
import com.battlelancer.seriesguide.util.MovieTools;
import com.battlelancer.seriesguide.util.MovieTools_MembersInjector;
import com.battlelancer.seriesguide.util.TraktRatingsTask;
import com.battlelancer.seriesguide.util.TraktRatingsTask_MembersInjector;
import com.battlelancer.seriesguide.util.TraktTask;
import com.battlelancer.seriesguide.util.TraktTask_MembersInjector;
import com.battlelancer.seriesguide.util.TraktTools;
import com.battlelancer.seriesguide.util.TraktTools_MembersInjector;
import com.battlelancer.seriesguide.util.tasks.BaseMovieActionTask;
import com.battlelancer.seriesguide.util.tasks.BaseMovieActionTask_MembersInjector;
import com.battlelancer.seriesguide.util.tasks.BaseRateItemTask;
import com.battlelancer.seriesguide.util.tasks.BaseRateItemTask_MembersInjector;
import com.battlelancer.seriesguide.util.tasks.BaseShowActionTask;
import com.battlelancer.seriesguide.util.tasks.BaseShowActionTask_MembersInjector;
import com.uwetrottmann.thetvdb.TheTvdb;
import com.uwetrottmann.thetvdb.services.TheTvdbEpisodes;
import com.uwetrottmann.thetvdb.services.TheTvdbSearch;
import com.uwetrottmann.thetvdb.services.TheTvdbSeries;
import com.uwetrottmann.tmdb2.Tmdb;
import com.uwetrottmann.tmdb2.services.ConfigurationService;
import com.uwetrottmann.tmdb2.services.FindService;
import com.uwetrottmann.tmdb2.services.MoviesService;
import com.uwetrottmann.tmdb2.services.PeopleService;
import com.uwetrottmann.tmdb2.services.SearchService;
import com.uwetrottmann.tmdb2.services.TvService;
import com.uwetrottmann.trakt5.TraktV2;
import com.uwetrottmann.trakt5.services.Checkin;
import com.uwetrottmann.trakt5.services.Comments;
import com.uwetrottmann.trakt5.services.Episodes;
import com.uwetrottmann.trakt5.services.Movies;
import com.uwetrottmann.trakt5.services.Recommendations;
import com.uwetrottmann.trakt5.services.Search;
import com.uwetrottmann.trakt5.services.Shows;
import com.uwetrottmann.trakt5.services.Sync;
import com.uwetrottmann.trakt5.services.Users;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

public final class DaggerServicesComponent implements ServicesComponent {
  private Provider<Application> providesApplicationProvider;

  private Provider<SgApp> providesSgAppProvider;

  private Provider<Cache> provideOkHttpCacheProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<TraktV2> provideTraktProvider;

  private Provider<Sync> provideSyncProvider;

  private MembersInjector<AddShowTask> addShowTaskMembersInjector;

  private Provider<TheTvdb> provideTheTvdbProvider;

  private MembersInjector<AllApisAuthenticator> allApisAuthenticatorMembersInjector;

  private MembersInjector<BaseMovieActionTask> baseMovieActionTaskMembersInjector;

  private MembersInjector<BaseRateItemTask> baseRateItemTaskMembersInjector;

  private MembersInjector<BaseShowActionTask> baseShowActionTaskMembersInjector;

  private Provider<Users> provideUsersProvider;

  private MembersInjector<ConnectTraktTask> connectTraktTaskMembersInjector;

  private MembersInjector<EpisodeTools.EpisodeFlagTask> episodeFlagTaskMembersInjector;

  private Provider<Tmdb> provideSgTmdbProvider;

  private Provider<MoviesService> provideMovieServiceProvider;

  private MembersInjector<MovieCreditsLoader> movieCreditsLoaderMembersInjector;

  private MembersInjector<MovieTrailersLoader> movieTrailersLoaderMembersInjector;

  private Provider<Movies> provideMoviesProvider;

  private Provider<Search> provideSearchProvider;

  private MembersInjector<MovieTools> movieToolsMembersInjector;

  private Provider<PeopleService> providePeopleServiceProvider;

  private MembersInjector<PersonLoader> personLoaderMembersInjector;

  private Provider<ConfigurationService> provideConfigurationServiceProvider;

  private MembersInjector<SgSyncAdapter> sgSyncAdapterMembersInjector;

  private MembersInjector<SgTheTvdbInterceptor> sgTheTvdbInterceptorMembersInjector;

  private MembersInjector<SgTraktInterceptor> sgTraktInterceptorMembersInjector;

  private Provider<FindService> provideFindServiceProvider;

  private Provider<TvService> provideTvServiceProvider;

  private MembersInjector<ShowCreditsLoader> showCreditsLoaderMembersInjector;

  private Provider<SearchService> provideSearchServiceProvider;

  private MembersInjector<TmdbMoviesLoader> tmdbMoviesLoaderMembersInjector;

  private Provider<Recommendations> provideRecommendationsProvider;

  private MembersInjector<TraktAddLoader> traktAddLoaderMembersInjector;

  private MembersInjector<TraktAuthActivity> traktAuthActivityMembersInjector;

  private Provider<Checkin> provideCheckinProvider;

  private MembersInjector<TraktCancelCheckinDialogFragment>
      traktCancelCheckinDialogFragmentMembersInjector;

  private Provider<Episodes> provideEpisodesProvider;

  private Provider<Shows> provideShowsProvider;

  private MembersInjector<TraktCommentsLoader> traktCommentsLoaderMembersInjector;

  private MembersInjector<TraktEpisodeHistoryLoader> traktEpisodeHistoryLoaderMembersInjector;

  private MembersInjector<TraktFriendsEpisodeHistoryLoader>
      traktFriendsEpisodeHistoryLoaderMembersInjector;

  private MembersInjector<TraktFriendsMovieHistoryLoader>
      traktFriendsMovieHistoryLoaderMembersInjector;

  private MembersInjector<TraktRatingsTask> traktRatingsTaskMembersInjector;

  private MembersInjector<TraktRecentEpisodeHistoryLoader>
      traktRecentEpisodeHistoryLoaderMembersInjector;

  private Provider<Comments> provideCommentsProvider;

  private MembersInjector<TraktTask> traktTaskMembersInjector;

  private MembersInjector<TraktTools> traktToolsMembersInjector;

  private MembersInjector<TvdbAddLoader> tvdbAddLoaderMembersInjector;

  private Provider<TheTvdbEpisodes> provideEpisodesServiceProvider;

  private MembersInjector<TvdbEpisodeDetailsTask> tvdbEpisodeDetailsTaskMembersInjector;

  private Provider<TheTvdbSearch> provideSearchProvider2;

  private Provider<TheTvdbSeries> provideSeriesServiceProvider;

  private MembersInjector<TvdbTools> tvdbToolsMembersInjector;

  private DaggerServicesComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providesApplicationProvider =
        AppModule_ProvidesApplicationFactory.create(builder.appModule);

    this.providesSgAppProvider = AppModule_ProvidesSgAppFactory.create(builder.appModule);

    this.provideOkHttpCacheProvider =
        DoubleCheck.provider(
            HttpClientModule_ProvideOkHttpCacheFactory.create(
                builder.httpClientModule, providesApplicationProvider));

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            HttpClientModule_ProvideOkHttpClientFactory.create(
                builder.httpClientModule, providesSgAppProvider, provideOkHttpCacheProvider));

    this.provideTraktProvider =
        DoubleCheck.provider(
            TraktModule_ProvideTraktFactory.create(
                builder.traktModule, providesApplicationProvider, provideOkHttpClientProvider));

    this.provideSyncProvider =
        DoubleCheck.provider(
            TraktModule_ProvideSyncFactory.create(builder.traktModule, provideTraktProvider));

    this.addShowTaskMembersInjector = AddShowTask_MembersInjector.create(provideSyncProvider);

    this.provideTheTvdbProvider =
        DoubleCheck.provider(
            TvdbModule_ProvideTheTvdbFactory.create(
                builder.tvdbModule, providesApplicationProvider, provideOkHttpClientProvider));

    this.allApisAuthenticatorMembersInjector =
        AllApisAuthenticator_MembersInjector.create(provideTheTvdbProvider, provideTraktProvider);

    this.baseMovieActionTaskMembersInjector =
        BaseMovieActionTask_MembersInjector.create(provideSyncProvider);

    this.baseRateItemTaskMembersInjector =
        BaseRateItemTask_MembersInjector.create(provideSyncProvider);

    this.baseShowActionTaskMembersInjector =
        BaseShowActionTask_MembersInjector.create(provideSyncProvider);

    this.provideUsersProvider =
        DoubleCheck.provider(
            TraktModule_ProvideUsersFactory.create(builder.traktModule, provideTraktProvider));

    this.connectTraktTaskMembersInjector =
        ConnectTraktTask_MembersInjector.create(provideTraktProvider, provideUsersProvider);

    this.episodeFlagTaskMembersInjector =
        EpisodeTools_EpisodeFlagTask_MembersInjector.create(provideSyncProvider);

    this.provideSgTmdbProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideSgTmdbFactory.create(
                builder.tmdbModule, provideOkHttpClientProvider));

    this.provideMovieServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideMovieServiceFactory.create(
                builder.tmdbModule, provideSgTmdbProvider));

    this.movieCreditsLoaderMembersInjector =
        MovieCreditsLoader_MembersInjector.create(provideMovieServiceProvider);

    this.movieTrailersLoaderMembersInjector =
        MovieTrailersLoader_MembersInjector.create(provideMovieServiceProvider);

    this.provideMoviesProvider =
        DoubleCheck.provider(
            TraktModule_ProvideMoviesFactory.create(builder.traktModule, provideTraktProvider));

    this.provideSearchProvider =
        DoubleCheck.provider(
            TraktModule_ProvideSearchFactory.create(builder.traktModule, provideTraktProvider));

    this.movieToolsMembersInjector =
        MovieTools_MembersInjector.create(
            provideMovieServiceProvider,
            provideMoviesProvider,
            provideSearchProvider,
            provideSyncProvider);

    this.providePeopleServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvidePeopleServiceFactory.create(
                builder.tmdbModule, provideSgTmdbProvider));

    this.personLoaderMembersInjector =
        PersonLoader_MembersInjector.create(providePeopleServiceProvider);

    this.provideConfigurationServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideConfigurationServiceFactory.create(
                builder.tmdbModule, provideSgTmdbProvider));

    this.sgSyncAdapterMembersInjector =
        SgSyncAdapter_MembersInjector.create(provideConfigurationServiceProvider);

    this.sgTheTvdbInterceptorMembersInjector =
        SgTheTvdbInterceptor_MembersInjector.create(provideTheTvdbProvider);

    this.sgTraktInterceptorMembersInjector =
        SgTraktInterceptor_MembersInjector.create(provideTraktProvider);

    this.provideFindServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideFindServiceFactory.create(builder.tmdbModule, provideSgTmdbProvider));

    this.provideTvServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideTvServiceFactory.create(builder.tmdbModule, provideSgTmdbProvider));

    this.showCreditsLoaderMembersInjector =
        ShowCreditsLoader_MembersInjector.create(
            provideFindServiceProvider, provideTvServiceProvider);

    this.provideSearchServiceProvider =
        DoubleCheck.provider(
            TmdbModule_ProvideSearchServiceFactory.create(
                builder.tmdbModule, provideSgTmdbProvider));

    this.tmdbMoviesLoaderMembersInjector =
        TmdbMoviesLoader_MembersInjector.create(
            provideSgTmdbProvider, provideMovieServiceProvider, provideSearchServiceProvider);

    this.provideRecommendationsProvider =
        DoubleCheck.provider(
            TraktModule_ProvideRecommendationsFactory.create(
                builder.traktModule, provideTraktProvider));

    this.traktAddLoaderMembersInjector =
        TraktAddLoader_MembersInjector.create(provideRecommendationsProvider, provideSyncProvider);

    this.traktAuthActivityMembersInjector =
        TraktAuthActivity_MembersInjector.create(provideTraktProvider);

    this.provideCheckinProvider =
        DoubleCheck.provider(
            TraktModule_ProvideCheckinFactory.create(builder.traktModule, provideTraktProvider));

    this.traktCancelCheckinDialogFragmentMembersInjector =
        TraktCancelCheckinDialogFragment_MembersInjector.create(provideCheckinProvider);

    this.provideEpisodesProvider =
        DoubleCheck.provider(
            TraktModule_ProvideEpisodesFactory.create(builder.traktModule, provideTraktProvider));

    this.provideShowsProvider =
        DoubleCheck.provider(
            TraktModule_ProvideShowsFactory.create(builder.traktModule, provideTraktProvider));

    this.traktCommentsLoaderMembersInjector =
        TraktCommentsLoader_MembersInjector.create(
            provideEpisodesProvider, provideMoviesProvider, provideShowsProvider);

    this.traktEpisodeHistoryLoaderMembersInjector =
        TraktEpisodeHistoryLoader_MembersInjector.create(provideUsersProvider);

    this.traktFriendsEpisodeHistoryLoaderMembersInjector =
        TraktFriendsEpisodeHistoryLoader_MembersInjector.create(provideUsersProvider);

    this.traktFriendsMovieHistoryLoaderMembersInjector =
        TraktFriendsMovieHistoryLoader_MembersInjector.create(provideUsersProvider);

    this.traktRatingsTaskMembersInjector =
        TraktRatingsTask_MembersInjector.create(provideShowsProvider, provideEpisodesProvider);

    this.traktRecentEpisodeHistoryLoaderMembersInjector =
        TraktRecentEpisodeHistoryLoader_MembersInjector.create(provideUsersProvider);

    this.provideCommentsProvider =
        DoubleCheck.provider(
            TraktModule_ProvideCommentsFactory.create(builder.traktModule, provideTraktProvider));

    this.traktTaskMembersInjector =
        TraktTask_MembersInjector.create(
            provideTraktProvider, provideCheckinProvider, provideCommentsProvider);

    this.traktToolsMembersInjector = TraktTools_MembersInjector.create(provideSyncProvider);

    this.tvdbAddLoaderMembersInjector =
        TvdbAddLoader_MembersInjector.create(provideShowsProvider, provideSearchProvider);

    this.provideEpisodesServiceProvider =
        DoubleCheck.provider(
            TvdbModule_ProvideEpisodesServiceFactory.create(
                builder.tvdbModule, provideTheTvdbProvider));

    this.tvdbEpisodeDetailsTaskMembersInjector =
        TvdbEpisodeDetailsTask_MembersInjector.create(provideEpisodesServiceProvider);

    this.provideSearchProvider2 =
        DoubleCheck.provider(
            TvdbModule_ProvideSearchFactory.create(builder.tvdbModule, provideTheTvdbProvider));

    this.provideSeriesServiceProvider =
        DoubleCheck.provider(
            TvdbModule_ProvideSeriesServiceFactory.create(
                builder.tvdbModule, provideTheTvdbProvider));

    this.tvdbToolsMembersInjector =
        TvdbTools_MembersInjector.create(
            provideSearchProvider2,
            provideSeriesServiceProvider,
            provideSearchProvider,
            provideShowsProvider,
            provideOkHttpClientProvider);
  }

  @Override
  public void inject(AddShowTask addShowTask) {
    addShowTaskMembersInjector.injectMembers(addShowTask);
  }

  @Override
  public void inject(AllApisAuthenticator allApisAuthenticator) {
    allApisAuthenticatorMembersInjector.injectMembers(allApisAuthenticator);
  }

  @Override
  public void inject(BaseMovieActionTask baseMovieActionTask) {
    baseMovieActionTaskMembersInjector.injectMembers(baseMovieActionTask);
  }

  @Override
  public void inject(BaseRateItemTask baseRateItemTask) {
    baseRateItemTaskMembersInjector.injectMembers(baseRateItemTask);
  }

  @Override
  public void inject(BaseShowActionTask baseShowActionTask) {
    baseShowActionTaskMembersInjector.injectMembers(baseShowActionTask);
  }

  @Override
  public void inject(ConnectTraktTask connectTraktTask) {
    connectTraktTaskMembersInjector.injectMembers(connectTraktTask);
  }

  @Override
  public void inject(EpisodeTools.EpisodeFlagTask episodeFlagTask) {
    episodeFlagTaskMembersInjector.injectMembers(episodeFlagTask);
  }

  @Override
  public void inject(MovieCreditsLoader movieCreditsLoader) {
    movieCreditsLoaderMembersInjector.injectMembers(movieCreditsLoader);
  }

  @Override
  public void inject(MovieTrailersLoader movieTrailersLoader) {
    movieTrailersLoaderMembersInjector.injectMembers(movieTrailersLoader);
  }

  @Override
  public void inject(MovieTools movieTools) {
    movieToolsMembersInjector.injectMembers(movieTools);
  }

  @Override
  public void inject(PersonLoader personLoader) {
    personLoaderMembersInjector.injectMembers(personLoader);
  }

  @Override
  public void inject(SgSyncAdapter sgSyncAdapter) {
    sgSyncAdapterMembersInjector.injectMembers(sgSyncAdapter);
  }

  @Override
  public void inject(SgTheTvdbInterceptor sgTheTvdbInterceptor) {
    sgTheTvdbInterceptorMembersInjector.injectMembers(sgTheTvdbInterceptor);
  }

  @Override
  public void inject(SgTraktInterceptor sgTraktInterceptor) {
    sgTraktInterceptorMembersInjector.injectMembers(sgTraktInterceptor);
  }

  @Override
  public void inject(ShowCreditsLoader showCreditsLoader) {
    showCreditsLoaderMembersInjector.injectMembers(showCreditsLoader);
  }

  @Override
  public void inject(TmdbMoviesLoader tmdbMoviesLoader) {
    tmdbMoviesLoaderMembersInjector.injectMembers(tmdbMoviesLoader);
  }

  @Override
  public void inject(TraktAddLoader traktAddLoader) {
    traktAddLoaderMembersInjector.injectMembers(traktAddLoader);
  }

  @Override
  public void inject(TraktAuthActivity traktAuthActivity) {
    traktAuthActivityMembersInjector.injectMembers(traktAuthActivity);
  }

  @Override
  public void inject(TraktCancelCheckinDialogFragment traktCancelCheckinDialogFragment) {
    traktCancelCheckinDialogFragmentMembersInjector.injectMembers(traktCancelCheckinDialogFragment);
  }

  @Override
  public void inject(TraktCommentsLoader traktCommentsLoader) {
    traktCommentsLoaderMembersInjector.injectMembers(traktCommentsLoader);
  }

  @Override
  public void inject(TraktEpisodeHistoryLoader traktEpisodeHistoryLoader) {
    traktEpisodeHistoryLoaderMembersInjector.injectMembers(traktEpisodeHistoryLoader);
  }

  @Override
  public void inject(TraktFriendsEpisodeHistoryLoader traktFriendsEpisodeHistoryLoader) {
    traktFriendsEpisodeHistoryLoaderMembersInjector.injectMembers(traktFriendsEpisodeHistoryLoader);
  }

  @Override
  public void inject(TraktFriendsMovieHistoryLoader traktFriendsMovieHistoryLoader) {
    traktFriendsMovieHistoryLoaderMembersInjector.injectMembers(traktFriendsMovieHistoryLoader);
  }

  @Override
  public void inject(TraktRatingsTask traktRatingsTask) {
    traktRatingsTaskMembersInjector.injectMembers(traktRatingsTask);
  }

  @Override
  public void inject(TraktRecentEpisodeHistoryLoader traktRecentEpisodeHistoryLoader) {
    traktRecentEpisodeHistoryLoaderMembersInjector.injectMembers(traktRecentEpisodeHistoryLoader);
  }

  @Override
  public void inject(TraktTask traktTask) {
    traktTaskMembersInjector.injectMembers(traktTask);
  }

  @Override
  public void inject(TraktTools traktTools) {
    traktToolsMembersInjector.injectMembers(traktTools);
  }

  @Override
  public void inject(TvdbAddLoader tvdbAddLoader) {
    tvdbAddLoaderMembersInjector.injectMembers(tvdbAddLoader);
  }

  @Override
  public void inject(TvdbEpisodeDetailsTask tvdbEpisodeDetailsTask) {
    tvdbEpisodeDetailsTaskMembersInjector.injectMembers(tvdbEpisodeDetailsTask);
  }

  @Override
  public void inject(TvdbTools tvdbTools) {
    tvdbToolsMembersInjector.injectMembers(tvdbTools);
  }

  public static final class Builder {
    private AppModule appModule;

    private HttpClientModule httpClientModule;

    private TraktModule traktModule;

    private TvdbModule tvdbModule;

    private TmdbModule tmdbModule;

    private Builder() {}

    public ServicesComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (httpClientModule == null) {
        this.httpClientModule = new HttpClientModule();
      }
      if (traktModule == null) {
        this.traktModule = new TraktModule();
      }
      if (tvdbModule == null) {
        this.tvdbModule = new TvdbModule();
      }
      if (tmdbModule == null) {
        this.tmdbModule = new TmdbModule();
      }
      return new DaggerServicesComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder httpClientModule(HttpClientModule httpClientModule) {
      this.httpClientModule = Preconditions.checkNotNull(httpClientModule);
      return this;
    }

    public Builder tmdbModule(TmdbModule tmdbModule) {
      this.tmdbModule = Preconditions.checkNotNull(tmdbModule);
      return this;
    }

    public Builder traktModule(TraktModule traktModule) {
      this.traktModule = Preconditions.checkNotNull(traktModule);
      return this;
    }

    public Builder tvdbModule(TvdbModule tvdbModule) {
      this.tvdbModule = Preconditions.checkNotNull(tvdbModule);
      return this;
    }
  }
}
